{"version":3,"sources":["components/NavBar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","reverse","join","length","trimStart","trimEnd","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","Capitaliza","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.719e8adc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function NavBar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title} </Link> */}\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title} </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.aboutText}\r\n                </Link> */}\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-primary\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            {/* <div className={` mx-2 form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleGreenMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Green Mode</label>\r\n          </div> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavBar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string.isRequired };\r\n\r\nNavBar.defaultProps = { title: \"Some title\", aboutText: \"SOme Anout\" };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick = ()=>{\r\n    // console.log(\"clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"converted to upperCase\",\"success\");\r\n  };\r\n\r\n  const handleLowClick = ()=>{\r\n    // console.log(\"clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"converted to lowerCase\",\"success\");\r\n  };\r\n\r\n  const handleReverseClick = ()=>{\r\n    // console.log(\"clicked\");\r\n    let newText = text.split(\"\").reverse().join(\"\");\r\n    setText(newText);\r\n    props.showAlert(\"Text Reversed\",\"success\");\r\n  };\r\n\r\n  const handleOnChange = (event)=>{\r\n    // console.log(\"handleUpChange\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h1 >{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange}  \r\n        style={{backgroundColor: props.mode==='dark'?'grey':'white', color : props.mode==='dark'?'white':'#042743'}} \r\n         id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleUpClick} \r\n      //  style={{backgroundColor: props.mode==='dark'?'#235600':'blue'}} \r\n       >\r\n        Convert To Uppercase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}\r\n      // style={{backgroundColor: props.mode==='dark'?'#235600':'blue'}}\r\n      >\r\n        Convert To Lowercase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleReverseClick}\r\n      // style={{backgroundColor: props.mode==='dark'?'#235600':'blue'}}\r\n      >\r\n        Reverse\r\n      </button>\r\n    </div>\r\n    <div className=\"container my-2\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n      <h1>Your text summary</h1>\r\n      <p>Words{text.length>0 ? text.trimStart().trimEnd().split(\" \").length : 0} ,charaxcters  {text.length}</p>\r\n      <p> {0.008 * text.split(\" \").length } time min</p>\r\n      <h1>Preview</h1>\r\n      <p>{text.length>0?text:\"enter something to preview it.\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const Capitaliza =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1) ;\r\n    }\r\n\r\n    return (\r\n        props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong> {Capitaliza(props.alert.type)} </strong> : {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport NavBar from \"./components/NavBar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  // const toggleGreenMode = ()=>{\n  //   if(mode==='light'){\n  //     setMode('dark');\n  //     document.body.style.backgroundColor='#378900';\n  //     showAlert(\"Green mode has been enabled\",\"success\");\n  //   }\n  //   else{\n  //     setMode('light');\n  //     document.body.style.backgroundColor='white';\n  //     showAlert(\"Light mode has been enabled\",\"success\");\n  //   }\n  // }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n    {/* <Router> */}\n      <NavBar\n        title=\"TextUtils\"\n        aboutText=\"About\"\n        mode={mode}\n        toggleMode={toggleMode}\n        // toggleGreenMode={toggleGreenMode}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact  path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter text\" mode={mode} />\n          {/* </Route>\n        </Switch> */}\n      </div>\n      {/* </Router>  */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}